思考笔记

python可以写编译器吗？

 源代码到二进制
     源代码{中间经过了复杂的 转换/翻译 过程}二进制
 机器最终只能执行二进制，能跑起来的必定是机器码，不可能是源代码
     源代码面向人
     二进制面向机器
 
 用python编写中文编程语言的编译器源代码，还是汉化python本身？
 python的解释器是用c语言写成的并用GCC编译成二进制可执行程序，那么汉化python等于汉化GCC，
 但是GCC也是用C语言写成的，这好像进入到了死胡同。
 那么只能把思考的方向改变到>第一版GCC是怎么编译的？
     1，如果它是用其它语言写成的，那么需要考虑汉化那一门语言，方向走偏，不考虑。
     2，如果它是翻译为汇编，那么需要考虑它是怎么转换到汇编的。
          那么这里就进入了汉化汇编器的问题。
              汇编器是怎么将C代码转换为汇编码（操作码+十六进制）的呢？方向走偏，这不是考虑的重点。
          C代码{汇编器}汇编码
          这里需要考虑汇编码是以怎样的形式存在。
          前面说了，机器最终只能执行二进制，但汇编码还不是二进制，
          而目前的各种架构CPU已经可以执行汇编码（操作码+十六进制），这说明什么呢？
          这说明，汇编码到二进制这一层级的翻译过程已经被固化到CPU中去了，CPU已经提供了这一转换过程。
          也就是说到这一步已经不能通过软件的形式进行汉化。
          CPU中内含了字符转换功能，CPU已经不是简单的处理二进制，
          CPU可能也分了很多层级，最上面的一层就是将汇编码转换为二进制。
          那么，这带来了一种新的可能，即-在CPU中整合软件的部分功能，将 {转换/翻译/解释/编译} 的过程和功能固化到CPU中，
          在设计CPU的起始之时就考虑这一方面的功能。
              举一反三
              人类大脑语言中枢是怎么处理人类的【语言、 文字、 说话、 字符】的呢？
              把神经网络（（神经元-树突-轴突-神经元）*N）看做一个客观的物质形态之存在，
              那么，由神经网络组成的语言中枢可能已经将【语言、 文字、 说话、 字符】的 {转换/翻译/解释/编译} 过程和功能固化在了其中，
              也就是说人只是使用它罢了，并且处理的过程还是自动化的，
              那创造些功能的无形之手是什么呢？基因？神（某一更强大的物种）？还是宇和宙真身？
              这同时也解释了人为什么可以使用和掌握不同种类的各种形态的语言。
          
 那么，当前可行的汉化方式只能汉化到以英文字母组成的汇编操作码和十六进制数字。那从哪里开始呢？基于形的汉化还是基于神的汉化。
             1，基于形的汉化
                 形就是可见的一切，比如python、c等编程语言的字符、标示符、代码等可见形态。
             2，基于神的汉化
                 神就是不可见的一切，比如python、c等编程语言的变量概念、函数概念、数组 指针概念等思想。
             经过实践，我发现，人不能直接理解神，人必须要经过形的时间过程才能理解神的存在。
             也就是说形是神的宿主。神是形的主宰。时间、空间、物质、存在 {意志、意识、意念} 精神、思想
             怎么理解形或神呢？有句话叫你可以杀死我，但你杀不死我的精神/思想。
             人会死，但人的精神/思想不会死。所以，人的精神/思想可以从一个人传递到另一个人身上，或群体。
             所有事物都可分为形和神两部分，比如数学、数据结构、操作系统、计算机等词汇所表达的含义是将形和神合二为一之后的体现。
             那么现在就可知道，汉化已经存在的形态是最容易的。
             如果要汉化编程语言的神态，那么就相当于发明新的编程语言。那么，结构化是无法忽视的方法之一，
             怎么统领和使用海量的二进制？人群是怎么变成社会种族国家的呢？通过组织，结构化就是组织的一种体现。
             举一反三
             由此可见，所谓的编程语言只是一个统称，要学习编程语言，需要先学习它的形态，之后就可以掌握它的神态
             但编程语言的神态都是通用的，那么由一门编程语言就可以进入所有编程语言共有的神态域，
             因此可以使用掌握的神态域通其它编程语言，其它编程语言只是形态发生了变化而已。
             
             
          
          
          
总结如下；
                 横向                        横向                    横向                                                           横向
           ----------------------------------------------------------------------------------------------
            python程序               C程序                 汇编程序                                                     二进制程序
 纵向；python源代码 {GCC} C源代码{汇编器} 汇编源代码 {（操作码+十六进制）翻译器} 二进制码。
            python解释器            C编译器             汇编器                                                        二进制直译
            python二进制            C二进制             汇编二进制                                                 二进制机器码
            
我的社会经验告诉我，人们只会通过结果去评价和判断，而不能通过过程评价和判断，
所以，人们需要的是实物，是最终成品。
首先必须要做出来，想法必须要固化到具体的形态之中，人们才会肯定、认同这一想法。
人们对价值的认识只存在于事物，如果只有想法，人们只会忽略，即便这个想法有价值。
如果你觉得我说的这一观点有偏见，那么可以证明由无数人组成的社会本身充满偏见。

           如果是汉化编程语言的形态，无疑是缘木求鱼、南辕北辙、舍本逐末的做法，为什么？
           因为前面的总结对于现存的编程界代码容量来说，已经形成了庞大庞杂的体系，牵一发而动全身，
           编程语言已经被固化得相当的牢固，所以有很多编程界的大神对待中文编程语言的态度是两个极端；
           1，顺应现有基于英文字符的编程语言。不作任何改变。
           2，否则，都认为要创造新的中文编程语言。也就是汉化编程语言的神态。
           我提的想法汉化编程语言的形态-等价替换英文字符为中文字符；如关键字、函数名、变量名、方法名、类名等，遭到了全盘否定。
           那么，如果要汉化编程语言的神态该怎么办呢？
           这里需要极为详细地分析 {转换/翻译/解释/编译} 的过程和功能-即高级语言源代码到二进制的原理，
           和变量概念、函数概念、数组 指针概念等等思想-即编程语言的神态。
           
           
           前面说了，现在设计高级编程语言只能到汇编码（操作码+十六进制）这一步，毕竟，硬件无法改变。
           目前编程界远远没有具备设计硬件的能力。
           汇编码（操作码+十六进制）都是简单的名词或动词，还有一些缩写词，
           这一步可以进行等价替换，对于编程大神来说无需考虑。
           那么，现在需要运用编程语言共有的神态，即变量概念、函数概念、数组 指针概念等等思想设计基于中文字符的中文结构化文档。
               中文结构化文档 {转换/翻译/解释/编译} 汇编码（操作码+十六进制）
               
           中文结构化文档；
               设计三大流程控制的方法
                   顺序、选择、循环
               设计变量的表达形式和实现形态
                   使用英文键盘已有的字符还是软键盘
               设计逻辑连接结构
                    运算符体系和类型系统
               设计代码组织方式
                    使用函数还是面向对象或其他编程范式或创造全新的
               设计自动化辅助方法
                     内置函数、方法等建立在之前基础上的二级功能
                    
                    
            {转换/翻译/解释/编译}
                1，工厂模式
                        流水化
                2，图
                        映射
                3，树
                        路由表
                        哈希表
                4，易经
                        
      
       学习笔记 2018年1月1日13:57:18
                
    目前看来，掌握c语言和编译原理可能是创造中文编程语言、汉语编程语言的关键。
    创造一门开源自由，兼顾性能和开发效率 源代码安全性的，
    吸取c和python的优秀特性的中文编程语言是建立新的庞大复杂系统的基础。
    结构化在目前看来是被几十年的编程历史证明有效可靠的代码构架方法之一。       
    
    编程语言必须要被设计得足够的；
        简单简洁（字符少）、
        接近底层（对加工和存储有直接的封装）、
        模型化（保留神态的通用化，不规定形态的细节）、
        模块化（尽可能地原子化，模仿乐高）、
        精细操控力（对操作和数据有细密、密集的处理能力），
    要给语言使用者高度自由发挥的空间。
    
    对象、物件、器物
    实现原则；什么东西能用就用什么东西
    
    无法学习或学习不好的原因是；
        被强干扰分散注意力。
        注意力由五觉干扰同时也由五觉集中，五觉是，视觉、听觉、嗅觉、 味觉、 触觉。
        要增强学习的能力，必须要完全排除与所学内容无关的五觉。
        最好是在具有吸音尖劈的专业隔音降噪空间中学习，
        当然这是富人的特权，这也解释了穷人为什么无法有效获取知识，穷人没有资源去分析排除杂乱的信息，穷人只会被信息支配。

                              
           理论到实践，所谓的实践就是工程化。
           工程就是对理论的解，或从形态上，或从神态上。
           编译的重点就是语法树，要解析蕴含某种理论、思想、神态的源代码，首先得需要一台机器。
           在内存里可以被CPU执行的二进制机器，你可以将其想象为是兰姆达演算机，或精密复杂的引擎，或动物消化系统等等。
           输入机器需要的原料（数据+指令；源代码），经过机器的加工，
           将会输出新的成品（又是一台新的机器（可被执行的二进制机器））。
               例如；如果我们要创造一台可用的机器（软件产品（比如编译器）），那么，
               首先需要用某种程序语言（比如C，当然也可以用其它语言）写出一台机器的源代码（x，alpha），
               然后需要用这种语言它的已经具有的编译器或解释器的二进制机器成品（比如GCC，非GCC源代码，而是GCC二进制）
               对上面的那台机器的源代码（x，alpha）进行加工，加工完了，就能 造出/生产出 这台机器的成品（y，omega），
               这个成品存在的形式是一台新的二进制机器（它可以是各种类型的软件的成品，
               如编译器，驱动，内核，操作系统，游戏，办公软件等）。
           在这个过程中，思想、观点、说法、就是理论（如编译原理，xxx导论，xxx概论，客户需求），
           上机实操就是工程化就是实践（如分析，编写源代码，使用 编译器/解释器的二进制机器生成新的二进制，调试/测试）。
           
           找到的方法
               两大方法论；
                   1，改变思考问题的方式，
                       我是从面向过程和面向对象的区别中悟到。
                   2，形和神分离认识/认知。
                       我是从色界与无色界的说法中悟到。
                       
               还有培养想象力，具备精密想象力的生成能力，最重要的是能精确描述精密想象力的能力。
                  时间想象力，空间想象力，物质想象力。
           
            我得把编译器看做是一个软件，它与其它软件是一种平行关系，
            比如底层软件(OS/driver)，基础系统软件（Compiler/VM/DB等），
            性能要求比较高的应用软件（浏览器/图形图像处理/游戏/高性能服务器软件等）。

             要实现这个软件的功能，需要用另一种语言，
              比如C/或其他系统级语言，写出来，并编译为一台二进制机器，把这个软件的功能固化到二进制上。
              这个软件的功能承载的就是这门语言的理论和设计规范，需求和结构化文档（标准）所要求的那些功能。
              这些功能的集合被称之为编译器。



                        
